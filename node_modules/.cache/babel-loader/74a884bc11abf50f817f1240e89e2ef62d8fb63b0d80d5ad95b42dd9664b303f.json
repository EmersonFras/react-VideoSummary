{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst videosAdapter = createEntityAdapter({});\nconst initialState = videosAdapter.getInitialState();\nexport const videosApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getVideos: builder.query({\n      query: userId => `/videos?userId=${userId}`,\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      keepUnusedDataFor: 5,\n      // for development default is 60\n      transformResponse: responseData => {\n        if (Array.isArray(responseData)) {\n          const loadedVideos = responseData.map(video => {\n            video.id = video._id;\n            return video;\n          });\n          console.log('Loaded Videos:', loadedVideos); // Add this log to see loaded videos\n          return videosAdapter.setAll(initialState, loadedVideos);\n        } else {\n          console.error(\"Expected an array, but received:\", responseData);\n          return videosAdapter.setAll(initialState, []); // Empty state for non-array responses\n        }\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Video',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Video',\n            id\n          }))];\n        } else return [{\n          type: 'Video',\n          id: 'LIST'\n        }];\n      }\n    })\n  })\n});\nexport const {\n  useGetVideosQuery\n} = videosApiSlice;\nexport const selectVideosResult = videosApiSlice.endpoints.getVideos.select();\nconst selectVideosData = createSelector(selectVideosResult, videosResult => videosResult.data);\nexport const {\n  selectAll: selectAllVideos,\n  selectById: selectVideoById,\n  selectIds: selectVideoIds\n} = videosAdapter.getSelectors(state => {\n  var _selectVideosData;\n  return (_selectVideosData = selectVideosData(state)) !== null && _selectVideosData !== void 0 ? _selectVideosData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","videosAdapter","initialState","getInitialState","videosApiSlice","injectEndpoints","endpoints","builder","getVideos","query","userId","validateStatus","response","result","status","isError","keepUnusedDataFor","transformResponse","responseData","Array","isArray","loadedVideos","map","video","id","_id","console","log","setAll","error","providesTags","arg","ids","type","useGetVideosQuery","selectVideosResult","select","selectVideosData","videosResult","data","selectAll","selectAllVideos","selectById","selectVideoById","selectIds","selectVideoIds","getSelectors","state","_selectVideosData"],"sources":["/home/emersonfrasure/Projects/react-VideoSummary/src/features/videos/videosApiSlice.js"],"sourcesContent":["import {\n    createSelector,\n    createEntityAdapter\n} from \"@reduxjs/toolkit\"\nimport { apiSlice } from \"../../app/api/apiSlice\"\n\nconst videosAdapter = createEntityAdapter({})\n\nconst initialState = videosAdapter.getInitialState()\n\nexport const videosApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getVideos: builder.query({\n            query: (userId) => `/videos?userId=${userId}`,\n            validateStatus: (response, result) => {\n                return response.status === 200 && !result.isError\n            },\n            keepUnusedDataFor: 5, // for development default is 60\n            transformResponse: responseData => {\n                if (Array.isArray(responseData)) {\n                    const loadedVideos = responseData.map(video => {\n                        video.id = video._id;\n                        return video;\n                    });\n                    console.log('Loaded Videos:', loadedVideos); // Add this log to see loaded videos\n                return videosAdapter.setAll(initialState, loadedVideos)\n                } else {\n                    console.error(\"Expected an array, but received:\", responseData);\n                    return videosAdapter.setAll(initialState, []);  // Empty state for non-array responses\n                }\n            },\n            providesTags: (result, error, arg) => {\n                if (result?.ids) {\n                    return [\n                        { type: 'Video', id: 'LIST' },\n                        ...result.ids.map(id => ({ type: 'Video', id }))\n                    ]\n                } else return [{ type: 'Video', id: 'LIST' }]\n            }\n        })\n    })\n})\n\nexport const {\n    useGetVideosQuery,\n} = videosApiSlice\n\nexport const selectVideosResult = videosApiSlice.endpoints.getVideos.select()\n\nconst selectVideosData = createSelector(\n    selectVideosResult,\n    videosResult => videosResult.data\n)\n\nexport const {\n    selectAll: selectAllVideos,\n    selectById: selectVideoById,\n    selectIds: selectVideoIds\n\n} = videosAdapter.getSelectors(state => selectVideosData(state) ?? initialState)"],"mappings":"AAAA,SACIA,cAAc,EACdC,mBAAmB,QAChB,kBAAkB;AACzB,SAASC,QAAQ,QAAQ,wBAAwB;AAEjD,MAAMC,aAAa,GAAGF,mBAAmB,CAAC,CAAC,CAAC,CAAC;AAE7C,MAAMG,YAAY,GAAGD,aAAa,CAACE,eAAe,CAAC,CAAC;AAEpD,OAAO,MAAMC,cAAc,GAAGJ,QAAQ,CAACK,eAAe,CAAC;EACnDC,SAAS,EAAEC,OAAO,KAAK;IACnBC,SAAS,EAAED,OAAO,CAACE,KAAK,CAAC;MACrBA,KAAK,EAAGC,MAAM,IAAK,kBAAkBA,MAAM,EAAE;MAC7CC,cAAc,EAAEA,CAACC,QAAQ,EAAEC,MAAM,KAAK;QAClC,OAAOD,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,MAAM,CAACE,OAAO;MACrD,CAAC;MACDC,iBAAiB,EAAE,CAAC;MAAE;MACtBC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,IAAIC,KAAK,CAACC,OAAO,CAACF,YAAY,CAAC,EAAE;UAC7B,MAAMG,YAAY,GAAGH,YAAY,CAACI,GAAG,CAACC,KAAK,IAAI;YAC3CA,KAAK,CAACC,EAAE,GAAGD,KAAK,CAACE,GAAG;YACpB,OAAOF,KAAK;UAChB,CAAC,CAAC;UACFG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEN,YAAY,CAAC,CAAC,CAAC;UACjD,OAAOpB,aAAa,CAAC2B,MAAM,CAAC1B,YAAY,EAAEmB,YAAY,CAAC;QACvD,CAAC,MAAM;UACHK,OAAO,CAACG,KAAK,CAAC,kCAAkC,EAAEX,YAAY,CAAC;UAC/D,OAAOjB,aAAa,CAAC2B,MAAM,CAAC1B,YAAY,EAAE,EAAE,CAAC,CAAC,CAAE;QACpD;MACJ,CAAC;MACD4B,YAAY,EAAEA,CAACjB,MAAM,EAAEgB,KAAK,EAAEE,GAAG,KAAK;QAClC,IAAIlB,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEmB,GAAG,EAAE;UACb,OAAO,CACH;YAAEC,IAAI,EAAE,OAAO;YAAET,EAAE,EAAE;UAAO,CAAC,EAC7B,GAAGX,MAAM,CAACmB,GAAG,CAACV,GAAG,CAACE,EAAE,KAAK;YAAES,IAAI,EAAE,OAAO;YAAET;UAAG,CAAC,CAAC,CAAC,CACnD;QACL,CAAC,MAAM,OAAO,CAAC;UAAES,IAAI,EAAE,OAAO;UAAET,EAAE,EAAE;QAAO,CAAC,CAAC;MACjD;IACJ,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTU;AACJ,CAAC,GAAG9B,cAAc;AAElB,OAAO,MAAM+B,kBAAkB,GAAG/B,cAAc,CAACE,SAAS,CAACE,SAAS,CAAC4B,MAAM,CAAC,CAAC;AAE7E,MAAMC,gBAAgB,GAAGvC,cAAc,CACnCqC,kBAAkB,EAClBG,YAAY,IAAIA,YAAY,CAACC,IACjC,CAAC;AAED,OAAO,MAAM;EACTC,SAAS,EAAEC,eAAe;EAC1BC,UAAU,EAAEC,eAAe;EAC3BC,SAAS,EAAEC;AAEf,CAAC,GAAG5C,aAAa,CAAC6C,YAAY,CAACC,KAAK;EAAA,IAAAC,iBAAA;EAAA,QAAAA,iBAAA,GAAIX,gBAAgB,CAACU,KAAK,CAAC,cAAAC,iBAAA,cAAAA,iBAAA,GAAI9C,YAAY;AAAA,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}