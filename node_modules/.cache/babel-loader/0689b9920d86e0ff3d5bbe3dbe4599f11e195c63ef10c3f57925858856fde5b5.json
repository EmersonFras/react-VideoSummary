{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst videosAdapter = createEntityAdapter({});\nconst initialState = videosAdapter.getInitialState();\nexport const videosApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getVideos: builder.query({\n      query: userId => `/videos?userId=${userId}`,\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      transformResponse: responseData => {\n        if (!Array.isArray(responseData)) {\n          console.error(\"Expected an array, got:\", responseData);\n          return initialState; // Or handle it as you see fit\n        }\n        const loadedVideos = responseData.map(video => {\n          video.id = video._id;\n          console.log(video.id);\n          return video;\n        });\n        console.log(loadedVideos);\n        return videosAdapter.setAll(initialState, loadedVideos);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Video',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Video',\n            id\n          }))];\n        } else return [{\n          type: 'Video',\n          id: 'LIST'\n        }];\n      }\n    }),\n    addNewVideo: builder.mutation({\n      query: initialVideoData => ({\n        url: '/videos',\n        method: 'POST',\n        body: {\n          ...initialVideoData\n        },\n        invalidatesTags: [{\n          type: 'Video',\n          id: 'LIST'\n        }]\n      })\n    }),\n    updateVideo: builder.mutation({\n      query: initialVideoData => ({\n        url: `/videos`,\n        method: 'PATCH',\n        body: {\n          ...initialVideoData\n        },\n        invalidatesTags: (result, error, arg) => [{\n          type: 'Video',\n          id: arg.id\n        }]\n      })\n    }),\n    deleteVideo: builder.mutation({\n      query: ({\n        id\n      }) => ({\n        url: '/videos',\n        method: 'DELETE',\n        body: {\n          id\n        },\n        invalidatesTags: (result, error, arg) => [{\n          type: 'Video',\n          id: arg.id\n        }]\n      })\n    })\n  })\n});\nexport const {\n  useGetVideosQuery,\n  useAddNewVideoMutation,\n  useUpdateVideoMutation,\n  useDeleteVideoMutation\n} = videosApiSlice;\nconst selectVideosResult = (state, userId) => {\n  var _state$api$queries;\n  return ((_state$api$queries = state.api.queries[`getVideos(\"${userId}\")`]) === null || _state$api$queries === void 0 ? void 0 : _state$api$queries.data) || initialState;\n};\nconst selectVideosData = createSelector(selectVideosResult, videosResult => videosResult.data);\nexport const selectVideoById = userId => createSelector(state => selectVideosResult(state, userId), videosResult => {\n  return videoId => videosResult.entities[videoId] || null;\n});\nexport const {\n  selectAll: selectAllVideos\n} = videosAdapter.getSelectors(state => {\n  var _selectVideosResult;\n  return (_selectVideosResult = selectVideosResult(state, userId)) !== null && _selectVideosResult !== void 0 ? _selectVideosResult : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","videosAdapter","initialState","getInitialState","videosApiSlice","injectEndpoints","endpoints","builder","getVideos","query","userId","validateStatus","response","result","status","isError","transformResponse","responseData","Array","isArray","console","error","loadedVideos","map","video","id","_id","log","setAll","providesTags","arg","ids","type","addNewVideo","mutation","initialVideoData","url","method","body","invalidatesTags","updateVideo","deleteVideo","useGetVideosQuery","useAddNewVideoMutation","useUpdateVideoMutation","useDeleteVideoMutation","selectVideosResult","state","_state$api$queries","api","queries","data","selectVideosData","videosResult","selectVideoById","videoId","entities","selectAll","selectAllVideos","getSelectors","_selectVideosResult"],"sources":["/home/emersonfrasure/Projects/react-VideoSummary/src/features/videos/videosApiSlice.js"],"sourcesContent":["import {\n    createSelector,\n    createEntityAdapter\n} from \"@reduxjs/toolkit\"\nimport { apiSlice } from \"../../app/api/apiSlice\"\n\nconst videosAdapter = createEntityAdapter({})\n\nconst initialState = videosAdapter.getInitialState()\n\nexport const videosApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getVideos: builder.query({\n            query: (userId) => `/videos?userId=${userId}`,\n            validateStatus: (response, result) => {\n                return response.status === 200 && !result.isError\n            },\n            transformResponse: responseData => {\n                if (!Array.isArray(responseData)) {\n                    console.error(\"Expected an array, got:\", responseData);\n                    return initialState; // Or handle it as you see fit\n                }\n                const loadedVideos = responseData.map(video => {\n                    video.id = video._id;\n                    console.log(video.id)\n                    return video;\n                })\n                console.log(loadedVideos)\n                return videosAdapter.setAll(initialState, loadedVideos)\n            },\n            providesTags: (result, error, arg) => {\n                if (result?.ids) {\n                    return [\n                        { type: 'Video', id: 'LIST' },\n                        ...result.ids.map(id => ({ type: 'Video', id }))\n                    ]\n                } else return [{ type: 'Video', id: 'LIST' }]\n            }\n        }),\n        addNewVideo: builder.mutation({\n            query: initialVideoData => ({\n                url: '/videos',\n                method: 'POST',\n                body: {\n                    ...initialVideoData,\n                },\n                invalidatesTags: [\n                    { type: 'Video', id: 'LIST' }\n                ]\n            })\n        }),\n        updateVideo: builder.mutation({\n            query: initialVideoData => ({\n                url: `/videos`,\n                method: 'PATCH',\n                body: {\n                    ...initialVideoData,\n                },\n                invalidatesTags: (result, error, arg) => [{ type: 'Video', id: arg.id }]\n            }),\n        }),\n        deleteVideo: builder.mutation({\n            query: ({ id }) => ({\n                url: '/videos',\n                method: 'DELETE',\n                body: {\n                    id\n                },\n                invalidatesTags: (result, error, arg) => [{ type: 'Video', id: arg.id }]\n            }),\n        }),\n    })\n})\n\nexport const {\n    useGetVideosQuery,\n    useAddNewVideoMutation,\n    useUpdateVideoMutation,\n    useDeleteVideoMutation,\n} = videosApiSlice\n\nconst selectVideosResult = (state, userId) => \n    state.api.queries[`getVideos(\"${userId}\")`]?.data || initialState;\n\nconst selectVideosData = createSelector(\n    selectVideosResult,\n    videosResult => videosResult.data\n)\n\nexport const selectVideoById = (userId) => \n    createSelector(\n        (state) => selectVideosResult(state, userId),\n        (videosResult) => {\n            return (videoId) => videosResult.entities[videoId] || null;\n        }\n    );\n\nexport const {\n    selectAll: selectAllVideos,\n\n\n} = videosAdapter.getSelectors((state) => selectVideosResult(state, userId) ?? initialState);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}