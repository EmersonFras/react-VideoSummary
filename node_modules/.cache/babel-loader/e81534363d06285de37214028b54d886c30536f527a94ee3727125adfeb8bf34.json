{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst videosAdapter = createEntityAdapter({});\nconst initialState = videosAdapter.getInitialState();\nexport const videosApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getVideos: builder.query({\n      query: userId => `/videos?userId=${userId}`,\n      keepUnusedDataFor: 600,\n      // Cache for 10 minutes\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      transformResponse: responseData => {\n        if (!Array.isArray(responseData)) {\n          console.error(\"Expected an array, got:\", responseData);\n          return initialState; // Or handle it as you see fit\n        }\n        const loadedVideos = responseData.map(video => {\n          video.id = video._id;\n          return video;\n        });\n        return videosAdapter.setAll(initialState, loadedVideos);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Video',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Video',\n            id\n          }))];\n        } else return [{\n          type: 'Video',\n          id: 'LIST'\n        }];\n      }\n    }),\n    addNewVideo: builder.mutation({\n      query: initialVideoData => ({\n        url: '/videos',\n        method: 'POST',\n        body: {\n          ...initialVideoData\n        },\n        invalidatesTags: [{\n          type: 'Video',\n          id: 'LIST'\n        }]\n      })\n    }),\n    updateVideo: builder.mutation({\n      query: initialVideoData => ({\n        url: `/videos`,\n        method: 'PATCH',\n        body: {\n          ...initialVideoData\n        },\n        invalidatesTags: (result, error, arg) => [{\n          type: 'Video',\n          id: arg.id\n        }]\n      })\n    }),\n    deleteVideo: builder.mutation({\n      query: ({\n        id\n      }) => ({\n        url: '/videos',\n        method: 'DELETE',\n        body: {\n          id\n        },\n        invalidatesTags: (result, error, arg) => [{\n          type: 'Video',\n          id: arg.id\n        }]\n      })\n    })\n  })\n});\nexport const {\n  useGetVideosQuery,\n  useAddNewVideoMutation,\n  useUpdateVideoMutation,\n  useDeleteVideoMutation\n} = videosApiSlice;\n\n// export const selectVideosResult = videosApiSlice.endpoints.getVideos.select()\n\n// const selectVideosData = createSelector(\n//     selectVideosResult,\n//     videosResult => videosResult.data\n// )\n\n// export const {\n//     selectAll: selectAllVideos,\n//     selectById: selectVideoById\n\n// } = videosAdapter.getSelectors(state => selectVideosData(state) ?? initialState)\n\n// This creates a base selector to access video data based on userId.\nconst selectVideosResult = (state, userId) => {\n  var _state$api$queries;\n  return (_state$api$queries = state.api.queries[`getVideos(\"${userId}\")`]) !== null && _state$api$queries !== void 0 ? _state$api$queries : initialState;\n};\n\n// Selector to get video data.\nconst selectVideosData = createSelector((state, userId) => selectVideosResult(state, userId), videosResult => videosResult.data);\n\n// Create selectors for all videos and by id based on userId.\nexport const selectAllVideos = userId => createSelector(state => {\n  var _selectVideosData;\n  return (_selectVideosData = selectVideosData(state, userId)) !== null && _selectVideosData !== void 0 ? _selectVideosData : initialState;\n}, videos => videosAdapter.getSelectors().selectAll(videos));\nexport const selectVideoById = userId => createSelector(state => selectVideosData(state, userId), videosData => videosData !== null && videosData !== void 0 && videosData.entities ? videosData.entities[videoId] || null : null);","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","videosAdapter","initialState","getInitialState","videosApiSlice","injectEndpoints","endpoints","builder","getVideos","query","userId","keepUnusedDataFor","validateStatus","response","result","status","isError","transformResponse","responseData","Array","isArray","console","error","loadedVideos","map","video","id","_id","setAll","providesTags","arg","ids","type","addNewVideo","mutation","initialVideoData","url","method","body","invalidatesTags","updateVideo","deleteVideo","useGetVideosQuery","useAddNewVideoMutation","useUpdateVideoMutation","useDeleteVideoMutation","selectVideosResult","state","_state$api$queries","api","queries","selectVideosData","videosResult","data","selectAllVideos","_selectVideosData","videos","getSelectors","selectAll","selectVideoById","videosData","entities","videoId"],"sources":["/home/emersonfrasure/Projects/react-VideoSummary/src/features/videos/videosApiSlice.js"],"sourcesContent":["import {\n    createSelector,\n    createEntityAdapter\n} from \"@reduxjs/toolkit\"\nimport { apiSlice } from \"../../app/api/apiSlice\"\n\nconst videosAdapter = createEntityAdapter({})\n\nconst initialState = videosAdapter.getInitialState()\n\nexport const videosApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getVideos: builder.query({\n            query: (userId) => `/videos?userId=${userId}`,\n            keepUnusedDataFor: 600, // Cache for 10 minutes\n            validateStatus: (response, result) => {\n                return response.status === 200 && !result.isError\n            },\n            transformResponse: responseData => {\n                if (!Array.isArray(responseData)) {\n                    console.error(\"Expected an array, got:\", responseData);\n                    return initialState; // Or handle it as you see fit\n                }\n                const loadedVideos = responseData.map(video => {\n                    video.id = video._id;\n                    return video;\n                })\n                return videosAdapter.setAll(initialState, loadedVideos)\n            },\n            providesTags: (result, error, arg) => {\n                if (result?.ids) {\n                    return [\n                        { type: 'Video', id: 'LIST' },\n                        ...result.ids.map(id => ({ type: 'Video', id }))\n                    ]\n                } else return [{ type: 'Video', id: 'LIST' }]\n            }\n        }),\n        addNewVideo: builder.mutation({\n            query: initialVideoData => ({\n                url: '/videos',\n                method: 'POST',\n                body: {\n                    ...initialVideoData,\n                },\n                invalidatesTags: [\n                    { type: 'Video', id: 'LIST' }\n                ]\n            })\n        }),\n        updateVideo: builder.mutation({\n            query: initialVideoData => ({\n                url: `/videos`,\n                method: 'PATCH',\n                body: {\n                    ...initialVideoData,\n                },\n                invalidatesTags: (result, error, arg) => [{ type: 'Video', id: arg.id }]\n            }),\n        }),\n        deleteVideo: builder.mutation({\n            query: ({ id }) => ({\n                url: '/videos',\n                method: 'DELETE',\n                body: {\n                    id\n                },\n                invalidatesTags: (result, error, arg) => [{ type: 'Video', id: arg.id }]\n            }),\n        }),\n    })\n})\n\nexport const {\n    useGetVideosQuery,\n    useAddNewVideoMutation,\n    useUpdateVideoMutation,\n    useDeleteVideoMutation,\n} = videosApiSlice\n\n// export const selectVideosResult = videosApiSlice.endpoints.getVideos.select()\n\n// const selectVideosData = createSelector(\n//     selectVideosResult,\n//     videosResult => videosResult.data\n// )\n\n// export const {\n//     selectAll: selectAllVideos,\n//     selectById: selectVideoById\n\n// } = videosAdapter.getSelectors(state => selectVideosData(state) ?? initialState)\n\n// This creates a base selector to access video data based on userId.\nconst selectVideosResult = (state, userId) => \n    state.api.queries[`getVideos(\"${userId}\")`] ?? initialState;\n\n// Selector to get video data.\nconst selectVideosData = createSelector(\n    (state, userId) => selectVideosResult(state, userId),\n    videosResult => videosResult.data\n);\n\n// Create selectors for all videos and by id based on userId.\nexport const selectAllVideos = (userId) => \n    createSelector(\n        state => selectVideosData(state, userId) ?? initialState,\n        videos => videosAdapter.getSelectors().selectAll(videos)\n    );\n\nexport const selectVideoById = (userId) => \n    createSelector(\n        (state) => selectVideosData(state, userId),\n        (videosData) => videosData?.entities ? videosData.entities[videoId] || null : null\n    );"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}