{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst videosAdapter = createEntityAdapter({});\nconst initialState = videosAdapter.getInitialState();\nexport const videosApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getVideos: builder.query({\n      query: userId => `/videos?userId=${userId}`,\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      transformResponse: responseData => {\n        if (!Array.isArray(responseData)) {\n          console.error(\"Expected an array, got:\", responseData);\n          return initialState; // Or handle it as you see fit\n        }\n        console.log(responseData);\n        const loadedVideos = responseData.map(video => {\n          video.id = video.id;\n          return video;\n        });\n        return videosAdapter.setAll(initialState, loadedVideos);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Video',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Video',\n            id\n          }))];\n        } else return [{\n          type: 'Video',\n          id: 'LIST'\n        }];\n      }\n    }),\n    addNewVideo: builder.mutation({\n      query: initialVideoData => ({\n        url: '/videos',\n        method: 'POST',\n        body: {\n          ...initialVideoData\n        },\n        invalidatesTags: [{\n          type: 'Video',\n          id: 'LIST'\n        }]\n      })\n    }),\n    updateVideo: builder.mutation({\n      query: initialVideoData => ({\n        url: `/videos`,\n        method: 'PATCH',\n        body: {\n          ...initialVideoData\n        },\n        invalidatesTags: (result, error, arg) => [{\n          type: 'Video',\n          id: arg.id\n        }]\n      })\n    }),\n    deleteVideo: builder.mutation({\n      query: ({\n        id\n      }) => ({\n        url: '/videos',\n        method: 'DELETE',\n        body: {\n          id\n        },\n        invalidatesTags: (result, error, arg) => [{\n          type: 'Video',\n          id: arg.id\n        }]\n      })\n    })\n  })\n});\nexport const {\n  useGetVideosQuery,\n  useAddNewVideoMutation,\n  useUpdateVideoMutation,\n  useDeleteVideoMutation\n} = videosApiSlice;\nexport const selectVideosResult = videosApiSlice.endpoints.getVideos.select();\nconst selectVideosData = createSelector(selectVideosResult, videosResult => videosResult.data);\nexport const {\n  selectAll: selectAllVideos,\n  selectById: selectVideoById\n} = videosAdapter.getSelectors(state => {\n  var _selectVideosData;\n  return (_selectVideosData = selectVideosData(state)) !== null && _selectVideosData !== void 0 ? _selectVideosData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","videosAdapter","initialState","getInitialState","videosApiSlice","injectEndpoints","endpoints","builder","getVideos","query","userId","validateStatus","response","result","status","isError","transformResponse","responseData","Array","isArray","console","error","log","loadedVideos","map","video","id","setAll","providesTags","arg","ids","type","addNewVideo","mutation","initialVideoData","url","method","body","invalidatesTags","updateVideo","deleteVideo","useGetVideosQuery","useAddNewVideoMutation","useUpdateVideoMutation","useDeleteVideoMutation","selectVideosResult","select","selectVideosData","videosResult","data","selectAll","selectAllVideos","selectById","selectVideoById","getSelectors","state","_selectVideosData"],"sources":["/home/emersonfrasure/Projects/react-VideoSummary/src/features/videos/videosApiSlice.js"],"sourcesContent":["import {\n    createSelector,\n    createEntityAdapter\n} from \"@reduxjs/toolkit\"\nimport { apiSlice } from \"../../app/api/apiSlice\"\n\nconst videosAdapter = createEntityAdapter({})\n\nconst initialState = videosAdapter.getInitialState()\n\nexport const videosApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getVideos: builder.query({\n            query: (userId) => `/videos?userId=${userId}`,\n            validateStatus: (response, result) => {\n                return response.status === 200 && !result.isError\n            },\n            transformResponse: responseData => {\n                if (!Array.isArray(responseData)) {\n                    console.error(\"Expected an array, got:\", responseData);\n                    return initialState; // Or handle it as you see fit\n                }\n                console.log(responseData)\n                const loadedVideos = responseData.map(video => {\n                    video.id = video.id;\n                    return video;\n                });\n                return videosAdapter.setAll(initialState, loadedVideos)\n            },\n            providesTags: (result, error, arg) => {\n                if (result?.ids) {\n                    return [\n                        { type: 'Video', id: 'LIST' },\n                        ...result.ids.map(id => ({ type: 'Video', id }))\n                    ]\n                } else return [{ type: 'Video', id: 'LIST' }]\n            }\n        }),\n        addNewVideo: builder.mutation({\n            query: initialVideoData => ({\n                url: '/videos',\n                method: 'POST',\n                body: {\n                    ...initialVideoData,\n                },\n                invalidatesTags: [\n                    { type: 'Video', id: 'LIST' }\n                ]\n            })\n        }),\n        updateVideo: builder.mutation({\n            query: initialVideoData => ({\n                url: `/videos`,\n                method: 'PATCH',\n                body: {\n                    ...initialVideoData,\n                },\n                invalidatesTags: (result, error, arg) => [{ type: 'Video', id: arg.id }]\n            }),\n        }),\n        deleteVideo: builder.mutation({\n            query: ({ id }) => ({\n                url: '/videos',\n                method: 'DELETE',\n                body: {\n                    id\n                },\n                invalidatesTags: (result, error, arg) => [{ type: 'Video', id: arg.id }]\n            }),\n        }),\n    })\n})\n\nexport const {\n    useGetVideosQuery,\n    useAddNewVideoMutation,\n    useUpdateVideoMutation,\n    useDeleteVideoMutation,\n} = videosApiSlice\n\nexport const selectVideosResult = videosApiSlice.endpoints.getVideos.select()\n\nconst selectVideosData = createSelector(\n    selectVideosResult,\n    videosResult => videosResult.data\n)\n\nexport const {\n    selectAll: selectAllVideos,\n    selectById: selectVideoById\n\n} = videosAdapter.getSelectors(state => selectVideosData(state) ?? initialState)"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}